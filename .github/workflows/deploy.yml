name: Deploy (main)

on:
  push:
    branches: [ "main" ]

env:
  DEPLOY_PATH: ${{ secrets.SERVER_PATH }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Opcional) Se você quiser buildar artefatos antes de enviar
      # - run: npm ci && npm run build

      - name: Copiar arquivos para o servidor (scp/rsync)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # known_hosts: ${{ secrets.SERVER_SSH_KNOWN_HOSTS }} # se quiser
          source: "."
          target: "${{ env.DEPLOY_PATH }}"
          overwrite: true
          strip_components: 0
          # Evite enviar lixo
          exclude: |
            .git*
            node_modules
            docker-compose.local.yml
            dockerfile.dev
            yarn.lock
            package-lock.json

      - name: Deploy (ssh: criar .env e subir containers)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # known_hosts: ${{ secrets.SERVER_SSH_KNOWN_HOSTS }} # se quiser
          script: |
            set -e
            mkdir -p "${{ env.DEPLOY_PATH }}"
            cd "${{ env.DEPLOY_PATH }}"

            # Se tiver ENV_PROD_B64, grava/atualiza o .env
            if [ -n "${{ secrets.ENV_PROD_B64 }}" ]; then
              echo "${{ secrets.ENV_PROD_B64 }}" | base64 -d > .env
            fi

            # Subir/atualizar
            docker compose down
            docker compose up -d --build

            # (Opcional) rodar migrações prisma após subir a api
            # docker compose exec -T api npx prisma migrate deploy || true

            # Limpeza leve (somente imagens dangling)
            docker image prune -f